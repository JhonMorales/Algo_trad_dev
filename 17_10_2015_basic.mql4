//+------------------------------------------------------------------+
//|                                             E&PForTheFreedom.mq4 |
//|                        Enrico & Pietro                           | 
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "Copyright 2014, MetaQuotes Software Corp."
#property link      "http://www.mql5.com"
#property version   "1.00"
#property strict
input int    MovingPeriod  = 190;
input int    MovingShift   = 0;  //Changed to 0, we don't need the shift in this case.(??maybe after??)
int StopLoss = 200000;  
// Change
//In our first strategy we can change this value to 30, then we need to change it. 
int TakeProfit = 350000; //Same than before
int ticketSell = 0;
int ticketBuy =0;
bool openedOrderBuy = false;
bool openedOrderSell = false;
double RSI_SELL = 57; //I have to insert the code for closing the positions opened without take profit. I can explain this passage in the next steps.
double RSI_BUY = 43;
double last_price = 0; 
double lot = 0.05;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
/*    Buy function,it gets Take Profit and Stop Loss as global parameters, please look at the beginning of this file */
void buy()
{     
      double vbid    = MarketInfo(Symbol(),MODE_BID);
      double TP_b = NormalizeDouble(vbid + Point * TakeProfit , Digits)*0; 
      double SL_b = NormalizeDouble(vbid -  Point * StopLoss , Digits)*0;
      double vask    = MarketInfo(Symbol(),MODE_ASK);             
      ticketBuy = OrderSend(Symbol(), OP_BUY, lot, vask, 2, SL_b, TP_b, "Buy Order" , 0, 0 , clrGreen);
      if(ticketBuy<0)
      {  
         Print("OrderSend failed with error #",GetLastError());
      }
      else
      {  openedOrderBuy = True;
         Print("OrderSend placed successfully");
         Print("Hammer"); //My favourite pattern!This is not the case!(??maybe copy-paste??)
              
      }
}
/* Sell function,it gets Take Profit and Stop Loss as global parameters, please look at the beginning of this file */
void sell()
{
   double vbid    = MarketInfo(Symbol(), MODE_BID);
   double vask    = MarketInfo(Symbol(), MODE_ASK);
   double TP_s = NormalizeDouble(vask -  Point * TakeProfit , Digits)*0;
   double SL_s = NormalizeDouble(vask +  Point * StopLoss , Digits)*0; 
   ticketSell = OrderSend(Symbol(), OP_SELL, lot, vbid, 2, SL_s, TP_s, "Sell order" , 0 , 0 , clrRed);
   if( ticketSell<0)
   {
      Print("OrderSend failed with error #",GetLastError());
      Print("Hanging Man"); //Ahahahah Hanging man
                      
   }
   else
   {  
      Print("OrderSend placed successfully");
      openedOrderSell = True;
      Print("Hanging man");
              
   }
}
int OnInit()
  {
//--- create timer
     EventSetTimer(60);
     last_price = MarketInfo(Symbol(), MODE_ASK);
      
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//--- destroy timer
   EventKillTimer();
      
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
//---
      double ma;
      //--- go trading only for first tiks of new bar
     // if(Volume[0] > 1) return;
     
     /* TODO: Check if has to be used BID or ASK */
      double current_price = MarketInfo(Symbol(), MODE_BID);
      
      if(openedOrderBuy)
      {
         if(iRSI(NULL, 0, 50, PRICE_WEIGHTED, 1) <= 40)
         {
            if( OrderClose(ticketBuy, lot,  MarketInfo(Symbol(), MODE_BID), 100, clrNONE) )
            {
               Print("Closed successfully!!");
               openedOrderBuy = false;
            }
            else
            {
               Print("BUY position: please check the configuration; something is wrong!",GetLastError());
            }
         }
      }
      
      if(openedOrderSell)
      {
         if(iRSI(NULL, 0, 50, PRICE_WEIGHTED, 1) >= 60)
         {
            
            /*
            int NumberRetries = 3;
            for(int i = 0; i < NumberRetries; i++)
            {
               GetLastError();
               bool res = OrderClose(ticketSell, NormalizeDouble(lot,2), MarketInfo(Symbol(), MODE_ASK), 100, clrNONE);
               if(res)
               {
                  break;
               }
               else
               {
                  int error = GetLastError();
                  if(error == 138)
                  {
                     Print("Error 138: REQUOTE!!");
                  }
               }
            }
            */
            
            
            if( OrderClose(ticketSell, lot, MarketInfo(Symbol(), MODE_ASK), 100, clrNONE) )
            {
               Print("Closed successfully!!");
               openedOrderSell = false;
            }
            else
            {
               Print("SELL position: please check the configuration; something is wrong!",GetLastError());
               if(GetLastError() == 138)
               {
                  Print("REQUOTE ERROR GENERATED!!");
               }
            }
         }
      }
      //--- get Moving Average 
      ma = iMA( NULL, 0, MovingPeriod, MovingShift, MODE_SMMA, PRICE_WEIGHTED, 0);
       
      //--- sell conditions
      if( openedOrderSell == false && last_price < ma && current_price > ma && iRSI(NULL, 0, 50, PRICE_WEIGHTED, 1) > RSI_SELL )
      {
          sell();
          //return;
      }
      
      //--- buy conditions
      //
      if( openedOrderBuy == false && last_price > ma && current_price < ma && iRSI(NULL, 0, 50, PRICE_WEIGHTED, 1) < RSI_BUY)
      {
      
         buy();
       
         //return;
      }
      last_price = current_price;      
      
