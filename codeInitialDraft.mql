//First draft of the code
//---MODIFIED MA CODE USING THE INDICATOR RSI. CHANGED SOME PARAMETERS FOR THE ENTRY AND EXIT POINTS.
//IN THIS STEP WE HAVE TO IMPLEMENT A SOLID CODE ONLY USING MA AND RSI. IN THIS PHASE THE PROFIT DOES NOT MATTER.

#include <Trade\Trade.mqh>

input double MaximumRisk        = 0.02;    // Maximum Risk in percentage
input double DecreaseFactor     = 3;       // Descrease factor
input int    MovingPeriod       = 190;      // Moving Average period
input int    MovingShift        = 0;       // Moving Average shift

//--ADDED HERE THE RSI PERIOD VARIABLE
input int    MovingPeriodRSI    = 50; //Period RSI

//---MA AND RSI INIT VARS
int   ExtHandle=0;
int   RSIHandle=0;

//---WE CAN CHANGE THIS PART FOR THE MONEY MANAGEMENT LATER..NOT NOW, JUMP TO LINE 84
//+------------------------------------------------------------------+
//| Calculate optimal lot size                                       |
//+------------------------------------------------------------------+
double TradeSizeOptimized(void)
  {
   double price=0.0;
   double margin=0.0;
//--- select lot size
   if(!SymbolInfoDouble(_Symbol,SYMBOL_ASK,price))
      return(0.0);
   if(!OrderCalcMargin(ORDER_TYPE_BUY,_Symbol,1.0,price,margin))
      return(0.0);
   if(margin<=0.0)
      return(0.0);

   double lot=NormalizeDouble(AccountInfoDouble(ACCOUNT_FREEMARGIN)*MaximumRisk/margin,2);
//--- calculate number of losses orders without a break
   if(DecreaseFactor>0)
     {
      //--- select history for access
      HistorySelect(0,TimeCurrent());
      //---
      int    orders=HistoryDealsTotal();  // total history deals
      int    losses=0;                    // number of losses orders without a break

      for(int i=orders-1;i>=0;i--)
        {
         ulong ticket=HistoryDealGetTicket(i);
         if(ticket==0)
           {
            Print("HistoryDealGetTicket failed, no trade history");
            break;
           }
         //--- check symbol
         if(HistoryDealGetString(ticket,DEAL_SYMBOL)!=_Symbol)
            continue;
         //--- check profit
         double profit=HistoryDealGetDouble(ticket,DEAL_PROFIT);
         if(profit>0.0)
            break;
         if(profit<0.0)
            losses++;
        }
      //---
      if(losses>1)
         lot=NormalizeDouble(lot-lot*losses/DecreaseFactor,1);
     }
//--- normalize and check limits
   double stepvol=SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_STEP);
   lot=stepvol*NormalizeDouble(lot/stepvol,0);

   double minvol=SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_MIN);
   if(lot<minvol)
      lot=minvol;

   double maxvol=SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_MAX);
   if(lot>maxvol)
      lot=maxvol;
//--- return trading volume
   return(lot);
  }

//+------------------------------------------------------------------+
//| Check for open position conditions                               |
//+------------------------------------------------------------------+
void CheckForOpen(void)
  {
  // Array with the prices for the last [n] bars
   MqlRates hArr[500];
//--- Copying the history into hArr, returning the number of bars.
   if(CopyRates(_Symbol,_Period,0,500,hArr)!=500)
     {
      Print("CopyRates of ",_Symbol," failed, no history");
      return;
     }
   if(hArr[0].tick_volume>1)
      return;

//--- get current Moving Average 
   double   ma[1];
   //---Copying the value of the MA indicator
   if(CopyBuffer(ExtHandle,0,0,1,ma)!=1)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   //For the RSI
   double rsi[1];
      if(CopyBuffer(RSIHandle,0,0,1,rsi)!=1)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }

//--- check signals
   ENUM_ORDER_TYPE signal=WRONG_VALUE;

/*---Conditions!!
If the prices are above the MA and the RSI is above a fixed value, then sell. Setting sl in the closing phase.
If the prices are under the MA and the RSI is under a fixed value, then buy.
*/
   //---SELL 
   if(hArr[0].high > ma[0] && hArr[0].high - ma[0]== 0.200 &&      
   rsi[0]>52 &&  hArr[0].low > hArr[300].low
   ){
      signal =ORDER_TYPE_SELL;
      }
   else
   //---BUY
   if(hArr[0].high < ma[0] && hArr[0].high - ma[0]== -0.200 &&      
   rsi[0]<48 && hArr[0].high < hArr[300].high
   ){
      signal =ORDER_TYPE_BUY;
      }
      
//--- Opening positions on the market!!
   if(signal!=WRONG_VALUE)
      if(TerminalInfoInteger(TERMINAL_TRADE_ALLOWED))
         if(Bars(_Symbol,_Period)>100)
           {
            CTrade trade;
            trade.PositionOpen(_Symbol,signal,TradeSizeOptimized(),
                               SymbolInfoDouble(_Symbol,signal==ORDER_TYPE_SELL ? SYMBOL_BID:SYMBOL_ASK),
                               0,0);
           }
//---
  }
//+------------------------------------------------------------------+
//| Check for close position conditions                              |
//+------------------------------------------------------------------+
void CheckForClose(void)
  {
   MqlRates hArr2[500];

   if(CopyRates(_Symbol,_Period,0,500,hArr2)!=500)
     {
      Print("CopyRates of ",_Symbol," failed, no history");
      return;
     }
   if(hArr2[1].tick_volume>1)
      return;

   double   ma[1];
   if(CopyBuffer(ExtHandle,0,0,1,ma)!=1)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double rsi[1];
      if(CopyBuffer(RSIHandle,0,0,1,rsi)!=1)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
//--- positions already selected before
   bool signal=false;
   long type=PositionGetInteger(POSITION_TYPE);

   if(type==(long)POSITION_TYPE_BUY   && rsi[0] > 60.5
   && hArr2[0].low - ma[0] == -0.35
   )
      signal=true;
   if(type==(long)POSITION_TYPE_SELL  && rsi[0] < 39.5
   && hArr2[0].high - ma[0] == 0.35
   )
      signal=true;

//---Closing positions
   if(signal)
      if(TerminalInfoInteger(TERMINAL_TRADE_ALLOWED))
         if(Bars(_Symbol,_Period)>100)
           {
            CTrade trade; //Obj to close the positions
            trade.PositionClose(_Symbol,3); //Closing position if boolean var signal is true
           }

  }
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit(void)
  {
//---RSI
   RSIHandle=iRSI(_Symbol,_Period,MovingPeriodRSI,PRICE_WEIGHTED);
   if(RSIHandle==INVALID_HANDLE)
   {
      printf("Eror creating the RSI indicator, please check!");
      return(INIT_FAILED);
      }
      
//---MA
   ExtHandle=iMA(_Symbol,_Period,MovingPeriod,MovingShift,MODE_LWMA,PRICE_WEIGHTED);
   if(ExtHandle==INVALID_HANDLE)
     {
      printf("Error creating MA indicator");
      return(INIT_FAILED);
     }
//---INITIALIZATION SUCCEEDED
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick(void)
  {
//---
   if(PositionSelect(_Symbol))
      CheckForClose();
   else
      CheckForOpen();
//---
  }
  //The OnDeinit function not used here..
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
  }
//+------------------------------------------------------------------+
